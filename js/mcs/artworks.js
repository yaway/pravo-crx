// Generated by CoffeeScript 1.9.3
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['lib/underscore', 'found/c', 'mcs/Artwork', 'found/api'], function(_, C, Artwork, API) {
  var Artworks;
  Artworks = (function(superClass) {
    extend(Artworks, superClass);

    function Artworks() {
      this.onGotLocal = bind(this.onGotLocal, this);
      this.onGotServer = bind(this.onGotServer, this);
      return Artworks.__super__.constructor.apply(this, arguments);
    }

    Artworks.prototype.model = Artwork;

    Artworks.prototype.initialize = function() {
      this.on({
        "gotLocal": this.onGotLocal,
        "gotServer": this.onGotServer
      });
      this.getLocal();
      return this.getServer();
    };

    Artworks.prototype.onGotServer = function() {
      return this.trigger('allUpdate');
    };

    Artworks.prototype.onGotLocal = function() {
      return this.trigger('allUpdate');
    };

    Artworks.prototype.update = function() {
      console.log("Updated to " + this.length + " Artworks");
      return console.log(this.models);
    };

    Artworks.prototype.getLocal = function() {
      console.debug("Getting Local Artworks");
      return chrome.storage.sync.get('artworks', (function(_this) {
        return function(data) {
          var i, len, rawArtwork, rawArtworks;
          if (!data.artworks) {
            console.log('No Local Artworks');
          } else {
            _this.reset();
            rawArtworks = JSON.parse(data.artworks || {});
            for (i = 0, len = rawArtworks.length; i < len; i++) {
              rawArtwork = rawArtworks[i];
              console.log("New Artwork from Local");
              _this.add(rawArtwork);
            }
          }
          _this.trigger("gotLocal");
          console.debug("Local Artworks Get:");
          return console.log(_this.models);
        };
      })(this));
    };

    Artworks.prototype.setLocal = function() {
      var artworksJSON;
      console.debug('Setting LocalArtworks');
      artworksJSON = JSON.stringify(this.models);
      console.log(artworksJSON);
      return chrome.storage.sync.set({
        'artworks': artworksJSON
      }, (function(_this) {
        return function() {
          _this.trigger("setLocal");
          console.log("Local Artworks Set:");
          return console.log(_this.models);
        };
      })(this));
    };

    Artworks.prototype.getServer = function() {
      console.debug("Getting Server Artworks");
      return API.getArtworks({}, (function(_this) {
        return function(err, data) {
          var i, len, rawArtwork, refArtwork, refArtworks;
          refArtworks = [];
          console.debug("Server Data:");
          console.log(data);
          if ((data != null ? data.length : void 0) > 0) {
            _this.reset();
            refArtworks = data;
            for (i = 0, len = refArtworks.length; i < len; i++) {
              refArtwork = refArtworks[i];
              rawArtwork = {
                id: refArtwork.id,
                url: refArtwork.file_url
              };
              _this.add(rawArtwork);
              _this.at(0).set('isCurrent', true);
            }
            _this.trigger("gotServer");
            console.debug("Server Artworks Get:");
            return console.log(_this.models);
          }
        };
      })(this));
    };

    return Artworks;

  })(C);
  return Artworks;
});
