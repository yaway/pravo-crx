// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['lib/backbone', 'found/tpl'], function(Backbone, TPL) {
  var VC;
  VC = (function(_super) {
    __extends(VC, _super);

    function VC(option) {
      if (option == null) {
        option = {};
      }
      if (this.ui == null) {
        this.ui = {};
      }
      this.block = option.block;
      this.$root = $("[data-root='" + (option.root || '') + "']");
      if (option.template) {
        this.template = TPL.getTpl(option.template);
      } else {
        this.template = this.template || '<div></div>';
      }
    }

    VC.prototype.update = function() {};

    VC.prototype.getUi = function(ui) {
      return this.$el.find("[data-ui='" + ui + "']");
    };

    VC.prototype.getRenderData = function() {
      if (this.model) {
        return this.model.toJSON();
      }
      return {};
    };

    VC.prototype.render = function(data) {
      var $el, elStr, tpl, vc;
      if (data == null) {
        data = this.getRenderData();
      }
      tpl = _.template(this.template);
      elStr = tpl(data);
      $el = $(elStr);
      vc = this;
      $el.find('[data-ui]').each(function() {
        vc.ui[this.getAttribute('data-ui')] = this;
        return vc.ui["$" + (this.getAttribute('data-ui'))] = $(this);
      });
      this.setElement($el[0]);
      if (this.block === 'ap') {
        this.$root.append($el);
      } else if (this.block === 'pre') {
        this.$root.prepend($el);
      } else {
        this.$root.replaceWith($el);
      }
      this.update();
      return $el[0];
    };

    return VC;

  })(Backbone.View);
  return VC;
});
