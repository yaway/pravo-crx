// Generated by CoffeeScript 1.9.3
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['lib/underscore', 'found/vc'], function(_, VC) {
  var Artwork;
  Artwork = (function(superClass) {
    extend(Artwork, superClass);

    function Artwork() {
      this.onWillUnsetCurrent = bind(this.onWillUnsetCurrent, this);
      this.onWillSetCurrent = bind(this.onWillSetCurrent, this);
      this.onChangeIsCurrent = bind(this.onChangeIsCurrent, this);
      this.onChangeSrc = bind(this.onChangeSrc, this);
      return Artwork.__super__.constructor.apply(this, arguments);
    }

    Artwork.prototype.initialize = function(option) {
      Artwork.__super__.initialize.call(this, option);
      this.render();
      this.on({
        "willSetCurrent": this.onWillSetCurrent,
        "willUnSetCurrent": this.onWillUnsetCurrent
      });
      return this.model.on({
        "change:isCurrent": this.onChangeIsCurrent,
        "change:src": this.onChangeSrc
      });
    };

    Artwork.prototype.onChangeSrc = function() {
      return this.ui.$img.attr('src', this.model.get('src'));
    };

    Artwork.prototype.onChangeIsCurrent = function() {
      console.log('Artwork Changed: isCurrent');
      return this.updateStateCurrent();
    };

    Artwork.prototype.update = function() {
      console.log("ArtworkVC Updated");
      return this.updateStateCurrent();
    };

    Artwork.prototype.onWillSetCurrent = function() {
      console.debug("onSetCurrent");
      return this.setCurrent();
    };

    Artwork.prototype.onWillUnsetCurrent = function() {
      console.debug("onUnsetCurrent");
      return this.unsetCurrent();
    };

    Artwork.prototype.updateStateCurrent = function() {
      if (this.model.get('isCurrent')) {
        return this.setCurrent();
      } else {
        return this.unsetCurrent();
      }
    };

    Artwork.prototype.setCurrent = function() {
      this.$el.addClass('current');
      return this.model.set('isCurrent', true);
    };

    Artwork.prototype.unsetCurrent = function() {
      this.$el.removeClass('current');
      return this.model.set('isCurrent', false);
    };

    return Artwork;

  })(VC);
  return Artwork;
});
