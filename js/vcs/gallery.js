// Generated by CoffeeScript 1.9.3
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['lib/underscore', 'found/vc', 'mcs/artwork', 'mcs/artworks', 'vcs/artwork'], function(_, VC, Artwork, Artworks, ArtworkVC) {
  var Gallery;
  Gallery = (function(superClass) {
    extend(Gallery, superClass);

    function Gallery() {
      this.onArtworksSetLocal = bind(this.onArtworksSetLocal, this);
      this.onArtworksGotLocal = bind(this.onArtworksGotLocal, this);
      this.onArtworksGotServer = bind(this.onArtworksGotServer, this);
      this.initializeArtworks = bind(this.initializeArtworks, this);
      this.onClickArtwork = bind(this.onClickArtwork, this);
      return Gallery.__super__.constructor.apply(this, arguments);
    }

    Gallery.prototype.events = {
      "click [data-ui='artwork']": 'onClickArtwork'
    };

    Gallery.prototype.onClickArtwork = function() {
      console.error('Artwork Clicked');
      this.artworks.loop();
      if (this.artworks.isSettingLocal) {
        console.error('Is Setting Local Artworks');
        return this.artworks.once('setLocal', this.artworks.setLocal);
      } else {
        return this.artworks.setLocal();
      }
    };

    Gallery.prototype.initialize = function(option) {
      Gallery.__super__.initialize.call(this, option);
      this.artworks = new Artworks;
      this.artworks.currentIndex = 0;
      this.isArtworksSetLocal = false;
      return this.render();
    };

    Gallery.prototype.initializeArtworks = function() {
      this.artworks.getLocal();
      this.artworks.getServer();
      this.renderArtworks();
      return this.artworks.on({
        'gotLocal': this.onArtworksGotLocal,
        'setLocal': this.onArtworksSetLocal,
        'gotServer': this.onArtworksGotServer
      });
    };

    Gallery.prototype.onArtworksGotServer = function() {
      console.error('Artworks Got Server');
      this.artworks.setLocal();
      return this.renderArtworks();
    };

    Gallery.prototype.onArtworksGotLocal = function() {
      console.error('Artworks Got Local');
      if (this.artworks.length > 0) {
        return this.renderArtworks();
      } else {
        return this.artworks.getServer();
      }
    };

    Gallery.prototype.onArtworksSetLocal = function() {
      console.error('Artworks Set Local');
      return this.isArtworksSetLocal = true;
    };

    Gallery.prototype.update = function() {
      console.log("Gallery Rendered");
      return this.initializeArtworks();
    };

    Gallery.prototype.renderArtworks = function() {
      var artwork, artworkVC, i, len, ref, results;
      this.ui.$artworks.empty();
      if (!this.artworks) {
        console.log("No Artworks to Render");
        return;
      }
      console.log(this.artworks);
      ref = this.artworks.models;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        artwork = ref[i];
        results.push(artworkVC = new ArtworkVC({
          root: 'artworks',
          position: 'append',
          template: 'artwork',
          model: artwork
        }));
      }
      return results;
    };

    Gallery.prototype.downloadArtworks = function() {};

    return Gallery;

  })(VC);
  return Gallery;
});
