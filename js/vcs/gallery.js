// Generated by CoffeeScript 1.9.3
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['lib/underscore', 'found/vc', 'mcs/artwork', 'mcs/artworks', 'vcs/artwork'], function(_, VC, Artwork, Artworks, ArtworkVC) {
  var Gallery;
  Gallery = (function(superClass) {
    extend(Gallery, superClass);

    function Gallery() {
      this.initializeArtworks = bind(this.initializeArtworks, this);
      this.onArtworksAllUpdate = bind(this.onArtworksAllUpdate, this);
      this.onClickArtwork = bind(this.onClickArtwork, this);
      return Gallery.__super__.constructor.apply(this, arguments);
    }

    Gallery.prototype.events = {
      "click [data-ui='artwork']": 'onClickArtwork'
    };

    Gallery.prototype.onClickArtwork = function() {
      console.error('Artwork Clicked');
      return this.updateCurrentArtwork();
    };

    Gallery.prototype.initialize = function(option) {
      Gallery.__super__.initialize.call(this, option);
      if (this.artworks == null) {
        this.artworks = option.artworks || {};
      }
      if (this.artworkVCs == null) {
        this.artworkVCs = [];
      }
      this.artworkRefs = [];
      this.currentArtworkIndex = 0;
      return this.render();
    };

    Gallery.prototype.onArtworksAllUpdate = function() {
      console.error('Artworks All Updated');
      return this.initializeArtworks();
    };

    Gallery.prototype.update = function() {
      console.log("GalleryVC Updated");
      return this.initializeArtworks();
    };

    Gallery.prototype.initializeArtworks = function() {
      var artwork, artwork1, artwork2, artwork3, artwork4, i, j, len, ref;
      if (_.isEmpty(this.artworks)) {
        artwork1 = new Artwork({
          path: '1.png',
          isCurrent: true
        });
        artwork2 = new Artwork({
          path: '2.png'
        });
        artwork3 = new Artwork({
          path: '3.png'
        });
        artwork4 = new Artwork({
          path: '0.png'
        });
        this.artworks = new Artworks([artwork1, artwork2]);
        this.artworks.add([artwork3, artwork4]);
        ref = this.artworks.models;
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          artwork = ref[i];
          if (artwork.isCurrent) {
            this.currentArtworkIndex = i;
          }
        }
      }
      this.renderArtworks();
      return this.artworks.on({
        'allUpdate': this.onArtworksAllUpdate
      });
    };

    Gallery.prototype.renderArtworks = function() {
      var artwork, artworkVC, j, len, ref, results;
      this.ui.$artworks.empty();
      if (!this.artworks) {
        console.log("No Artworks to Render");
        return;
      }
      console.log(this.artworks);
      ref = this.artworks.models;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        artwork = ref[j];
        artworkVC = new ArtworkVC({
          root: 'artworks',
          position: 'append',
          template: 'artwork',
          model: artwork
        });
        results.push(this.artworkVCs.push(artworkVC));
      }
      return results;
    };

    Gallery.prototype.updateCurrentArtwork = function() {
      this.toggleCurrentArtwork();
      if (this.currentArtworkIndex < this.artworks.length - 1) {
        this.currentArtworkIndex++;
      } else {
        this.currentArtworkIndex = 0;
      }
      return this.toggleCurrentArtwork();
    };

    Gallery.prototype.toggleCurrentArtwork = function() {
      if (this.artworks.models[this.currentArtworkIndex].get('isCurrent')) {
        return this.artworks.models[this.currentArtworkIndex].set('isCurrent', false);
      } else {
        return this.artworks.models[this.currentArtworkIndex].set('isCurrent', true);
      }
    };

    Gallery.prototype.downloadArtworks = function() {};

    return Gallery;

  })(VC);
  return Gallery;
});
