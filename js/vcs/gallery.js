// Generated by CoffeeScript 1.9.3
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['lib/underscore', 'found/vc', 'mcs/artwork', 'mcs/artworks', 'vcs/artwork'], function(_, VC, Artwork, Artworks, ArtworkVC) {
  var Gallery;
  Gallery = (function(superClass) {
    extend(Gallery, superClass);

    function Gallery() {
      this.onSettedLocalArtworks = bind(this.onSettedLocalArtworks, this);
      this.onGotLocalArtworks = bind(this.onGotLocalArtworks, this);
      this.onClickArtwork = bind(this.onClickArtwork, this);
      return Gallery.__super__.constructor.apply(this, arguments);
    }

    Gallery.prototype.events = {
      "click [data-ui='artwork']": 'onClickArtwork'
    };

    Gallery.prototype.onClickArtwork = function() {
      this.updateCurrentArtwork();
      return this.setLocalArtworks();
    };

    Gallery.prototype.initialize = function(option) {
      Gallery.__super__.initialize.call(this, option);
      if (this.artworks == null) {
        this.artworks = option.artworks || {};
      }
      if (this.artworkVCs == null) {
        this.artworkVCs = [];
      }
      this.currentArtworkIndex = 0;
      this.render();
      return this.on({
        "gotLocalArtworks": this.onGotLocalArtworks,
        "settedLocalArtworks": this.onSettedLocalArtworks
      });
    };

    Gallery.prototype.update = function() {
      console.log("GalleryVC Updated");
      return this.getLocalArtworks();
    };

    Gallery.prototype.onGotLocalArtworks = function() {
      var artwork, artwork1, artwork2, artwork3, artwork4, i, j, len, ref;
      console.log('Got LocalArtworks');
      if (_.isEmpty(this.artworks)) {
        artwork1 = new Artwork({
          path: '1.png'
        });
        artwork2 = new Artwork({
          path: '2.png'
        });
        artwork3 = new Artwork({
          path: '3.png'
        });
        artwork4 = new Artwork({
          path: '0.png'
        });
        this.artworks = new Artworks([artwork1, artwork2]);
        this.artworks.add([artwork3, artwork4]);
        this.artworks.models[this.currentArtworkIndex].set('isCurrent', true);
      } else {
        ref = this.artworks.models;
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          artwork = ref[i];
          if (artwork.get('isCurrent')) {
            this.currentArtworkIndex = i;
            console.log("Current Index is " + i);
          }
        }
      }
      this.setLocalArtworks();
      return this.renderArtworks();
    };

    Gallery.prototype.onSettedLocalArtworks = function() {
      return console.log('Setted LocalArtworks');
    };

    Gallery.prototype.setLocalArtworks = function() {
      var artworksJSON;
      console.log('Setting LocalArtworks');
      artworksJSON = JSON.stringify(this.artworks.models);
      console.log(artworksJSON);
      return chrome.storage.sync.set({
        'artworks': artworksJSON
      }, (function(_this) {
        return function() {
          _this.trigger("settedLocalArtworks");
          console.log("Local Data Setted:");
          return console.log(_this.artworks);
        };
      })(this));
    };

    Gallery.prototype.getLocalArtworks = function() {
      this.artworks = {};
      console.log('Getting LocalArtworks');
      return chrome.storage.sync.get('artworks', (function(_this) {
        return function(data) {
          var artwork, j, len, rawArtwork, rawArtworks;
          console.log("Local Data Got:");
          console.log(data);
          if (!data.artworks) {
            console.log('No Local Artworks');
          } else {
            rawArtworks = JSON.parse(data.artworks || {});
            _this.artworks = new Artworks;
            for (j = 0, len = rawArtworks.length; j < len; j++) {
              rawArtwork = rawArtworks[j];
              console.log("New Artwork from Local");
              artwork = new Artwork(rawArtwork);
              _this.artworks.add(artwork);
            }
          }
          return _this.trigger("gotLocalArtworks");
        };
      })(this));
    };

    Gallery.prototype.renderArtworks = function() {
      var artwork, artworkVC, j, len, ref, results;
      if (!this.artworks) {
        console.log("No Artworks to Render");
        return;
      }
      console.log(this.artworks);
      ref = this.artworks.models;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        artwork = ref[j];
        artworkVC = new ArtworkVC({
          root: 'artworks',
          position: 'append',
          template: 'artwork',
          model: artwork
        });
        results.push(this.artworkVCs.push(artworkVC));
      }
      return results;
    };

    Gallery.prototype.updateCurrentArtwork = function(index) {
      this.toggleCurrentArtwork();
      if (this.currentArtworkIndex < this.artworks.length - 1) {
        this.currentArtworkIndex++;
      } else {
        this.currentArtworkIndex = 0;
      }
      return this.toggleCurrentArtwork();
    };

    Gallery.prototype.toggleCurrentArtwork = function() {
      if (this.artworks.models[this.currentArtworkIndex].get('isCurrent')) {
        return this.artworks.models[this.currentArtworkIndex].set('isCurrent', false);
      } else {
        return this.artworks.models[this.currentArtworkIndex].set('isCurrent', true);
      }
    };

    return Gallery;

  })(VC);
  return Gallery;
});
