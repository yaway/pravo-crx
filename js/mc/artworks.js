// Generated by CoffeeScript 1.9.3
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['found/c', 'mc/artwork', 'found/api'], function(C, Artwork, API) {
  var Artworks;
  Artworks = (function(superClass) {
    extend(Artworks, superClass);

    function Artworks() {
      return Artworks.__super__.constructor.apply(this, arguments);
    }

    Artworks.prototype.model = Artwork;

    Artworks.prototype.save = function(opt) {
      var artworksJSON, rawArtworks;
      console.debug('Will Save Artworks');
      rawArtworks = this.models.map(function(artwork) {
        artwork = artwork.attributes;
        artwork.isCurrent = false;
        return artwork;
      });
      if (opt.only === "fav") {
        rawArtworks = _.where(rawArtworks, {
          isFavorite: true
        });
      } else if (opt.only === "nil") {
        rawArtworks = [];
      }
      artworksJSON = JSON.stringify(rawArtworks);
      console.log(artworksJSON);
      return chrome.storage.local.set({
        'artworks': artworksJSON
      }, (function(_this) {
        return function() {
          _this.trigger("didSaveToLocal");
          console.debug("Artworks Did Save:");
          return console.log(rawArtworks);
        };
      })(this));
    };

    Artworks.prototype.fetch = function(opt) {
      var callback, rawArtworks;
      console.debug('Will Fetch Artworks');
      rawArtworks = [];
      callback = opt.callback || (function(data) {
        return data;
      });
      if (opt.from === "local") {
        console.debug("Will Fetch Local Artworks");
        return chrome.storage.local.get('artworks', (function(_this) {
          return function(data) {
            if (!data.artworks) {
              return console.log('No Local Artworks to Fetch');
            } else {
              rawArtworks = JSON.parse(data.artworks || {});
              console.debug("Local Artworks Did Fetch:");
              console.log(rawArtworks);
              callback(rawArtworks);
              return _this.trigger("didFetchFromLocal");
            }
          };
        })(this));
      } else if (opt.from === "konachan") {
        console.debug("Will Fetch Server Artworks");
        return API.getArtworks({}, (function(_this) {
          return function(err, data) {
            var i, len, rawArtwork, refArtwork, refArtworks;
            refArtworks = [];
            console.debug("Server RefArtworks:");
            console.log(data);
            if ((data != null ? data.length : void 0) > 0) {
              refArtworks = data;
              for (i = 0, len = refArtworks.length; i < len; i++) {
                refArtwork = refArtworks[i];
                rawArtwork = {
                  id: refArtwork.id,
                  url: refArtwork.file_url,
                  thumb: refArtwork.preview_url
                };
                rawArtworks.push(rawArtwork);
              }
              console.debug("Server Artworks Did Fetch:");
              console.log(rawArtworks);
              callback(rawArtworks);
              return _this.trigger("didFetchFromServer");
            }
          };
        })(this));
      }
    };

    Artworks.prototype.loop = function() {
      var current, next;
      if (this.length < 2) {
        return;
      }
      current = this.getCurrent();
      console.log(this.models);
      next = this.getNext();
      current.set('isCurrent', false);
      return next.set('isCurrent', true);
    };

    Artworks.prototype.getCurrent = function() {
      var current;
      current = this.findWhere('isCurrent');
      return current;
    };

    Artworks.prototype.getNext = function() {
      var current, currentIndex, next;
      current = this.getCurrent();
      currentIndex = this.indexOf(current);
      console.error(currentIndex);
      if (currentIndex < this.length - 1) {
        next = this.at(currentIndex + 1);
      } else {
        next = this.at(0);
      }
      return next;
    };

    return Artworks;

  })(C);
  return Artworks;
});
