// Generated by CoffeeScript 1.9.3
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['found/vc', 'mc/artwork', 'mc/artworks', 'mc/receipt', 'vc/artwork-thumbnail'], function(VC, Artwork, Artworks, Receipt, ArtworkThumbnailVC) {
  var ReceiptVC;
  ReceiptVC = (function(superClass) {
    extend(ReceiptVC, superClass);

    function ReceiptVC() {
      this.onArtworksDidFetchFromServer = bind(this.onArtworksDidFetchFromServer, this);
      this.onArtworksUpdate = bind(this.onArtworksUpdate, this);
      this.initializeArtworks = bind(this.initializeArtworks, this);
      this.onChangeIsUnfolded = bind(this.onChangeIsUnfolded, this);
      this.onChangeHasArtworks = bind(this.onChangeHasArtworks, this);
      this.onClickBtnNew = bind(this.onClickBtnNew, this);
      return ReceiptVC.__super__.constructor.apply(this, arguments);
    }

    ReceiptVC.prototype.events = {
      "click [data-ui='btnNew']": 'onClickBtnNew'
    };

    ReceiptVC.prototype.onClickBtnNew = function(e) {
      console.error('BtnNew Clicked');
      e.stopPropagation();
      return this.model.toggle('isUnfolded');
    };

    ReceiptVC.prototype.initialize = function(opt) {
      ReceiptVC.__super__.initialize.call(this, opt);
      this.model = new Receipt;
      this.model.on({
        'change:hasArtworks': this.onChangeHasArtworks,
        'change:isUnfolded': this.onChangeIsUnfolded
      });
      this.artworks = new Artworks;
      this.artworks.on({
        'didFetchFromServer': this.onArtworksDidFetchFromServer,
        'update': this.onArtworksUpdate,
        'change:isChosen': (function(_this) {
          return function() {
            return console.error('Artworks isChosen Changed');
          };
        })(this)
      });
      return this.render();
    };

    ReceiptVC.prototype.onChangeHasArtworks = function() {
      if (this.model.get('hasArtworks')) {
        return this.$el.addClass('with-artworks');
      } else {
        return this.$el.removeClass('with-artworks');
      }
    };

    ReceiptVC.prototype.onChangeIsUnfolded = function() {
      if (this.model.get('isUnfolded')) {
        this.$el.addClass('unfolded');
        return this.ui.$btnNew.text('Close');
      } else {
        this.$el.removeClass('unfolded');
        return this.ui.$btnNew.text('New');
      }
    };

    ReceiptVC.prototype.initializeArtworks = function() {
      return this.artworks.fetch({
        from: "unsplash",
        callback: (function(_this) {
          return function(rawArtworks) {
            _this.artworks.add(rawArtworks);
            return console.debug(_this.artworks.pluck('id'));
          };
        })(this)
      });
    };

    ReceiptVC.prototype.onArtworksUpdate = function() {
      return this.renderArtworks();
    };

    ReceiptVC.prototype.onArtworksDidFetchFromServer = function() {
      return this.ui.$countNew.text(" (" + this.artworks.length + ")");
    };

    ReceiptVC.prototype.update = function() {
      console.log("Receipt Rendered");
      return this.initializeArtworks();
    };

    ReceiptVC.prototype.renderArtworks = function() {
      var artwork, artworkVC, i, len, ref, results;
      this.ui.$artworks.empty();
      if (!this.artworks) {
        console.log("No Artworks to Render");
        return;
      }
      console.error(this.artworks.length + " Artworks Rendered");
      this.model.set('hasArtworks', true);
      ref = this.artworks.models;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        artwork = ref[i];
        results.push(artworkVC = new ArtworkThumbnailVC({
          $root: this.ui.$artworks,
          position: 'append',
          template: 'artworkThumbnail',
          model: artwork
        }));
      }
      return results;
    };

    return ReceiptVC;

  })(VC);
  return ReceiptVC;
});
