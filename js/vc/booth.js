// Generated by CoffeeScript 1.9.3
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['found/vc', 'mc/artwork', 'mc/artworks', 'mc/booth', 'vc/artwork'], function(VC, Artwork, Artworks, Booth, ArtworkVC) {
  var BoothVC;
  BoothVC = (function(superClass) {
    extend(BoothVC, superClass);

    function BoothVC() {
      this.onArtworksChangeIsFavorite = bind(this.onArtworksChangeIsFavorite, this);
      this.onArtworksUpdate = bind(this.onArtworksUpdate, this);
      this.initializeArtworks = bind(this.initializeArtworks, this);
      this.onChangeHasArtworks = bind(this.onChangeHasArtworks, this);
      this.onClickBtnFav = bind(this.onClickBtnFav, this);
      this.onClickArtwork = bind(this.onClickArtwork, this);
      return BoothVC.__super__.constructor.apply(this, arguments);
    }

    BoothVC.prototype.events = {
      "click [data-ui='artwork']": 'onClickArtwork',
      "click [data-ui='btnFav']": 'onClickBtnFav'
    };

    BoothVC.prototype.onClickArtwork = function(e) {
      console.error('Artwork Clicked');
      e.stopPropagation();
      this.artworks.loop();
      return this.updateStateFavorite();
    };

    BoothVC.prototype.onClickBtnFav = function(e) {
      console.error('BtnFav Clicked');
      console.error('e');
      e.stopPropagation();
      return this.artworks.getCurrent().toggleFavorite();
    };

    BoothVC.prototype.initialize = function(opt) {
      BoothVC.__super__.initialize.call(this, opt);
      this.artworks = new Artworks;
      this.artworks.on({
        'didFetchFromLocal': this.onArtworksDidFetchFromLocal,
        'didFetchFromServer': this.onArtworksDidFetchFromServer,
        'change:isFavorite': this.onArtworksChangeIsFavorite,
        'change:isCurrent': this.onArtworksChangeIsCurrent,
        'update': this.onArtworksUpdate
      });
      this.model = new Booth;
      this.model.on({
        'change:hasArtworks': this.onChangeHasArtworks
      });
      return this.render();
    };

    BoothVC.prototype.onChangeHasArtworks = function() {
      if (this.model.get('hasArtworks')) {
        return this.$el.addClass('with-artworks');
      } else {
        return this.$el.removeClass('with-artworks');
      }
    };

    BoothVC.prototype.initializeArtworks = function() {
      return this.artworks.fetch({
        from: "local",
        callback: (function(_this) {
          return function(rawArtworks) {
            var lack, limit;
            limit = 5;
            lack = limit - rawArtworks.length;
            if (rawArtworks.length > 0) {
              rawArtworks[0].isCurrent = true;
              return _this.artworks.add(rawArtworks);
            }
          };
        })(this)
      });
    };

    BoothVC.prototype.onArtworksUpdate = function() {
      return this.renderArtworks();
    };

    BoothVC.prototype.onArtworksChangeIsFavorite = function() {
      this.updateStateFavorite();
      return this.artworks.save({
        only: "fav"
      });
    };

    BoothVC.prototype.update = function() {
      console.log("Booth Rendered");
      return this.initializeArtworks();
    };

    BoothVC.prototype.updateStateFavorite = function() {
      var currentArtwork;
      currentArtwork = this.artworks.getCurrent();
      if (currentArtwork.get('isFavorite')) {
        this.$el.addClass('favorite');
        return this.ui.$btnFav.text('Faved');
      } else {
        this.$el.removeClass('favorite');
        return this.ui.$btnFav.text('Fav');
      }
    };

    BoothVC.prototype.renderArtworks = function() {
      var artwork, artworkVC, i, len, ref;
      this.ui.$artworks.empty();
      if (!this.artworks) {
        console.log("No Artworks to Render");
        return;
      }
      console.error(this.artworks.length + " Artworks Rendered");
      this.model.set('hasArtworks', true);
      ref = this.artworks.models;
      for (i = 0, len = ref.length; i < len; i++) {
        artwork = ref[i];
        artworkVC = new ArtworkVC({
          $root: this.ui.$artworks,
          position: 'append',
          template: 'artwork',
          model: artwork
        });
      }
      return this.updateStateFavorite();
    };

    return BoothVC;

  })(VC);
  return BoothVC;
});
